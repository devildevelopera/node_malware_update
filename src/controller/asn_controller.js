const domainPing = require("domain-ping");
const Asn = require('../model/asn_model');
const Malware = require('../model/malwaresubmit_model');
const CSVMalware = require('../model/malware_csv');
const DomainLookup = require('../model/domain_lookup');
const getASNInfo = require('../helper').getASNInfo;
const getDomainInfoByAPI = require('../helper').getDomainInfoByAPI;
const getDomainInfoByDB = require('../helper').getDomainInfoByDB;
const checkExistDomain = require('../helper').checkExistDomain;
const constants = require('../constants');

statusCheck = domain => {
    return domainPing(domain)
        .then((res) => {
            if (res.online == true) {
                return true;
            } else {
                return false;
            }
        })
        .catch((error) => {
            throw error;
        });
}

replaceStatus = async (asns) => {
    for (var i = 0; i < asns.length; ++i) {
        var domain = asns[i]['url_ip'];
        try {
            const status = await statusCheck(domain)
            if (status) {
                asns[i]['status'] = 'online';
            } else {
                asns[i]['status'] = 'offline';
            }
        } catch (error) {
            throw error;
        }
    }
    return asns;
}


const getAllApprovalMalwares = () => {
    return new Promise((resolve, reject) => {
        Asn.find({}).sort({ dataAdded: -1 }).exec((err, asns) => {
            if (err) {
                reject(err);
            } else {
                resolve(asns);
            }
        });
    });
}

const getAllCSVMalwares = () => {
    return new Promise((resolve, reject) => {
        CSVMalware.find({}, (err, asns) => {
            if (err) {
                reject(err);
            } else {
                resolve(asns);
            }
        });
    });
}

exports.getAllAsn = async (req, res) => {
    var approvalMalwares = await getAllApprovalMalwares();
    res.json(approvalMalwares);
}

exports.getAsnByStatus = (req, res) => {
    let status = { status: req.params.status };
    Asn.find(status, (err, asns) => {
        if (err) {
            res.send(err);
        } else {
            res.json(asns);
        }
    });
}

exports.getAsnByDomain = (req, res) => {
    let domain = { url_ip: req.params.domain };
    Asn.find(domain, (err, asns) => {
        if (err) {
            res.send(err);
        } else {
            res.json(asns);
        }
    });
}

exports.getAsnByCountry = (req, res) => {
    let country = { country: req.params.country };
    Asn.find(country, (err, asns) => {
        if (err) {
            res.send(err);
        } else {
            res.json(asns);
        }
    });
}

exports.getAsnByAsn = (req, res) => {
    let asn = { ASN: req.params.asn };
    Asn.find(asn, (err, asns) => {
        if (err) {
            res.send(err);
        } else {
            res.json(asns);
        }
    });
}

exports.getAsnByDomainRegistrar = (req, res) => {
    let domainRegistrar = { domain_registrar: req.params.domain_registrar };
    Asn.find(domainRegistrar, (err, asns) => {
        if (err) {
            res.send(err);
        } else {
            res.json(asns);
        }
    });
}

exports.getAsnByDomainIpOwner = (req, res) => {
    let domainIpOwner = { domain_ip_owner: req.params.domain_ip_owner };
    Asn.find(domainIpOwner, (err, asns) => {
        if (err) {
            res.send(err);
        } else {
            res.json(asns);
        }
    });
}

exports.addNewAsn = (req, res) => {
    let asn = new Asn(req.body);
    asn.save()
        .then((asn) => {
            res.status(200).json({ 'success': 'Asn Info Successfully Added.' });
        })
        .catch((err) => {
            res.send('error');
        });
}

const getApprovalInfo = (id) => {
    return new Promise((resolve, reject) => {
        Malware.findOne({ _id: id }, (err, datas) => {
            if (err) throw reject(err);
            resolve(datas);
        });
    });
}

const updateApproval = (malware) => {
    return new Promise((resolve, reject) => {
        Malware.findOneAndUpdate({ _id: malware.id }, malware, { new: true }, (err, data) => {
            if (err) throw reject(err);
            resolve(data);
        });
    });
}

exports.addNewDomain = (domain) => {
    var newDomain = new DomainLookup(domain);
    newDomain.save()
        .then((data) => {
            console.log('success');
        })
        .catch((err) => {
            console.log(err);
        })
}

exports.addNewMalware = async (req, res) => {

    
    
    //file removed
    try {
        let malware_id = req.body.id;
        var result = {};
        var asnInfo = await getASNInfo(malware_id);
        var approvalInfo = await getApprovalInfo(malware_id);
        var domain = asnInfo.domain;
        var checkDomain = await checkExistDomain(domain);
        if (!checkDomain) {
            var domainInfo = await getDomainInfoByAPI(domain);
            await this.addNewDomain(domainInfo);
            result = { ...asnInfo, ...domainInfo };
            result.virusTotal = constants.virusTotalUrl + asnInfo.url_ip
        } else {
            var domainInfodb = await getDomainInfoByDB(domain);
            result = { ...asnInfo };
            result.ip = domainInfodb.ip;
            result.ASN = domainInfodb.ASN;
            result.virusTotal = constants.virusTotalUrl + asnInfo.url_ip
            result.country = domainInfodb.country;
            result.domain_registrar = domainInfodb.domain_registrar;
            result.domain_ip_owner = domainInfodb.domain_ip_owner;
        }
        var asn = new Asn(result);
        asn.save()
            .then((asn) => {
                console.log("create successed!", res);
                if (res) {
                    res.status(200).json({ 'success_id': malware_id });
                }
            })
            .catch((err) => {
                if (res) {
                    res.send('error');
                }
            });
        approvalInfo.approval = true;
        await updateApproval(approvalInfo);
    } catch (e) {
        console.log(e);
    }

}

exports.updateAsn = (req, res) => {
    Asn.findOneAndUpdate(
        { asn: req.params.asn },
        req.body,
        { new: true },
        (err, asn) => {
            if (err) return res.status(500).send(err);
            return res.json({ "status": "success" });
        });
}

exports.deleteAsnById = (req, res) => {
    console.log('malware delete');
    Asn.remove({
        _id: req.params.id
    }, (err, asn) => {
        if (err)
            res.send(err);
        res.json({ message: 'Malware successfully deleted!' });
    });
}